/Users/leddyr/Documents/GitHub/forked-rl/microgateway-core

grep -in 'console.log' lib/*.js
lib/logging.js:59:          console.log('logging to ' + logFilePath);
lib/logging.js:99:                  console.log(e);
lib/logging.js:117:                  console.log(e);
lib/logging.js:158:      console.log('logging to console');
grep -in 'console.info' lib/*.js
lib/gateway.js:138:                console.info(config.uid, 'edge micro listening on', config.edgemicro.address + ':' + server.address().port)

grep -in 'console.warn' lib/*.js

grep -in 'console.err' lib/*.js
lib/logging.js:110:        console.error(record);
lib/ondata-transform.js:18:        console.error(err);
lib/plugins.js:68:    console.error('error loading plugin', name);

grep -in 'logger' lib/*.js
lib/errors-middleware.js:10:  const logger = logging.getLogger();
lib/errors-middleware.js:28:    logger.error({req: req, res: res, err: err});
lib/gateway.js:31:        const logger = logging.getLogger()
lib/gateway.js:35:        const errors = errorsLib(config, logger)
lib/gateway.js:115:            logger.error(err, "failed in error handler");
lib/gateway.js:147:                logger.info({
lib/logging.js:17:var logger = null;
lib/logging.js:130:    return logger.writeLogRecord(serializeLogRecord(level, logConfig.level, obj, msg));
lib/logging.js:132:  logger = {
lib/logging.js:169:  return logger;
lib/logging.js:171:module.exports.getLogger = function () {
lib/logging.js:172:  return logger;
lib/logging.js:272:        logger.stats(statsInfo);
lib/plugins-middleware.js:31:    const logger = logging.getLogger();
lib/plugins-middleware.js:48:            logger.error('header length more than allowed size');
lib/plugins-middleware.js:54:            logger.info({
lib/plugins-middleware.js:132:    const logger = logging.getLogger();
lib/plugins-middleware.js:259:        logger.warn({
lib/plugins-middleware.js:273:                    logger.error(e);
lib/plugins-middleware.js:304:    logger.info(logInfo, 'targetRequest');
lib/plugins-middleware.js:326:    const logger = logging.getLogger();
lib/plugins-middleware.js:329:    logger.info({
lib/plugins-middleware.js:345:            err && logger.error(err);
lib/plugins-middleware.js:347:                logger.error("response finished before work can be done");
lib/plugins-middleware.js:404:    const logger = logging.getLogger();
lib/plugins-middleware.js:427:                    return logger.error(err);
lib/plugins-middleware.js:458:    const logger = logging.getLogger();
lib/plugins-middleware.js:492:                    logger.error(err);
lib/plugins-middleware.js:498:                    logger.info({
lib/plugins-middleware.js:506:                    logger.info({
lib/plugins-middleware.js:525:        logger.info({
lib/plugins-middleware.js:533:        logger.warn({
lib/plugins-middleware.js:562:    const logger = logging.getLogger();
lib/plugins-middleware.js:599:            logger.error(handlerException, plugin.id + " handler threw an exception")
lib/plugins.js:42:  const logger = logging.getLogger();
lib/plugins.js:63:    middleware = plugin(subconfig, logger, stats);
lib/plugins.js:66:    logger.info({}, 'installed plugin from ' + name);
grep -in 'console.log' *.js
server.js:16:  console.log('setting key %s to %s', k, v)
server.js:49:  plugins && console.log('plugins loaded ' + plugins.length)
server.js:53:    console.log('server is started');
grep -in 'console.info' *.js

grep -in 'console.warn' *.js

grep -in 'console.err' *.js
index.js:43:      console.error('error starting edge micro', err);

grep -in 'logger' *.js
index.js:36:  const logger =logging.getLogger();
index.js:56:  assert(_.isFunction(plugin),"plugin must be a function(config,logger,stats){return {onresponse:function(req,res,data,next){}}}");
